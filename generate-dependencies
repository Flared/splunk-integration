#!/usr/bin/env bash

#####################################################################################
############################## Generate Dependencies ################################
#####################################################################################
### This script is used to retrieve the dependencies used by the Splunk app,      ###
### retrieve the versions from the python-integrations resolve's requirements.txt ###
### and generate our own small requirements.txt to download the dependencies via  ###
### pip and finally move them to our git ignored                                  ###
#####################################################################################

usage() {
  echo "Usage: $(basename "$0") [-l|-h|-c] [--local|production|cleanup]"
  echo "    -l, --local: generate symlinks to the dependencies"
  echo "    -c, --cleanup: deletes the symlinks and the temp folders"
  echo "    -p, --production: move the download dependencies inside the bin folder of the application"
  exit 1
}

GENERATION_TYPE=""
WORKING_FOLDER="dependencies_temp"
INTEGRATIONS_RESOLVE_REQUIREMENTS_PATH="../../pants/resolves/python-integrations/requirements.txt"
REQUIREMENTS_PATH="${WORKING_FOLDER}/requirements.txt"
TEMP_VENDOR_FOLDER="${WORKING_FOLDER}/vendor"
SPLUNK_BIN_FOLDER="flare_splunk_integration/bin"

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      usage
      ;;
    -l|--local)
      shift
      GENERATION_TYPE="local"
      break
      ;;
    -c|--cleanup)
      shift
      GENERATION_TYPE="cleanup"
      break
      ;;
    -p|--production)
      shift
      GENERATION_TYPE="production"
      break
      ;;
    *)
      echo "Unknown argument $1"
      exit 1
      ;;
  esac
done
set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

log() {
    local MESSAGE=$1
    local GREEN='\e[32m'
    local NO_COLOR='\e[0m'
    echo -e "${GREEN}${MESSAGE}${NO_COLOR}"
}

errorlog() {
    local MESSAGE=$1
    local RED='\e[31m'
    local NO_COLOR='\033[0m'
    echo -e "${RED}${MESSAGE}${NO_COLOR}"
}

cleanup() {
    log "Cleaning old env"
    find $SPLUNK_BIN_FOLDER -type l -exec rm {} +
    rm -rf $WORKING_FOLDER
    mkdir $WORKING_FOLDER
}

if [ -z "$GENERATION_TYPE" ]; then
    echo "Bad Usage"
    echo "Use ---help to see the available options"
    exit 1
fi

cleanup

if [ "$GENERATION_TYPE" = "cleanup" ]; then
    log "All done!"
    exit 0
fi

log "Reading dependencies"
DEPENDENCIES=$(../../bin/pants dependencies flare_splunk_integration/bin::)
DEPENDENCIES_READ_RESULT=$?
if [[ "${DEPENDENCIES_READ_RESULT}" -ne 0 ]]; then
    errorlog "Error while infering dependencies with pants, exiting"
    exit $DEPENDENCIES_READ_RESULT
fi

REQUIREMENTS_PREFIX="pants/resolves/python-integrations:reqs"
RESOLVED_DEPENDENCIES=$(echo "$DEPENDENCIES" | grep "^$REQUIREMENTS_PREFIX" | cut -d'#' -f2-)

log "Generating requirements.txt"
touch $REQUIREMENTS_PATH
for dependency_name in "${RESOLVED_DEPENDENCIES[@]}"; do
    echo "Find version for ${dependency_name}"
    while IFS= read -r line; do
        IFS='==' read -ra parts <<< "$line"
        if [ "${parts[0]}" = "$dependency_name" ]; then
            version="${parts[2]}"
            echo "Found version ${version}"
            echo "${dependency_name}==${version}" >> ${REQUIREMENTS_PATH}
        fi
    done < "${INTEGRATIONS_RESOLVE_REQUIREMENTS_PATH}"
done

log "Download dependencies in the bin folder of Splunk"
mkdir ${TEMP_VENDOR_FOLDER}
pip install --target ${TEMP_VENDOR_FOLDER} -r ${REQUIREMENTS_PATH}

log "Deleting the dist-info, bin and __pycache__ folders"
find ${TEMP_VENDOR_FOLDER} -type d -name "*.dist-info" -exec rm -r {} +
rm -rf "${TEMP_VENDOR_FOLDER:?}/bin"
rm -rf "${TEMP_VENDOR_FOLDER:?}/__pycache__"

if [ "${GENERATION_TYPE}" = "local" ]; then
    log "Generate symlinks between the bin folder and this folder"
    for subfolder in "${TEMP_VENDOR_FOLDER}"/*/; do
        dependency_name=$(basename "${subfolder}")
        ln -s "$(pwd)/${subfolder}" "${SPLUNK_BIN_FOLDER}/${dependency_name}"
    done
elif [ "${GENERATION_TYPE}" = "production" ]; then
    log "Replace the Splunk vendor folder with the new libraries"
    mv ${TEMP_VENDOR_FOLDER}/* ${SPLUNK_BIN_FOLDER}
fi