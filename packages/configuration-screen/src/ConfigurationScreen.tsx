import React, { useEffect, useState } from 'react';
import Button from '@splunk/react-ui/Button';
import {
    retrieveServerKey,
    retrieveTenantId,
    retrieveUserTenants,
    saveConfiguration,
} from './setupConfiguration';
import { StyledContainer, StyledError } from './ConfigurationScreenStyles';
import { Tenant } from './models/flare';

const ConfigurationScreen = () => {
    const [serverKey, setServerKey] = useState('');
    const [tenantId, setTenantId] = useState(-1);
    const [errorMessage, setErrorMessage] = useState('');
    const [tenants, setUserTenants] = useState<Tenant[]>([]);
    const [isLoading, setIsLoading] = useState(false);

    function handleSubmitServerKey() {
        setIsLoading(true);
        retrieveUserTenants(
            serverKey,
            (userTenants) => {
                if (tenantId === -1 && userTenants.length > 0) {
                    setTenantId(userTenants[0].id);
                }
                setErrorMessage('');
                setUserTenants(userTenants);
                setIsLoading(false);
            },
            (error) => {
                setErrorMessage(error);
                setIsLoading(false);
            }
        );
    }

    async function handleSubmitTenant() {
        setIsLoading(true);
        await saveConfiguration(serverKey, tenantId);
    }

    useEffect(() => {
        setIsLoading(true);
        retrieveServerKey().then((key) => {
            setServerKey(key);
            retrieveTenantId().then((id) => {
                setTenantId(id);
                setIsLoading(false);
            });
        });
    }, []);

    if (isLoading) {
        return <div>Loading...</div>;
    }
    if (tenants.length === 0 || serverKey === '') {
        return (
            <StyledContainer>
                <h2>Enter your API Key</h2>
                <p>A new API Key can be generated by going on your profile page in Flare</p>
                <StyledError hidden={errorMessage.length === 0}>{errorMessage}</StyledError>
                <span>Server API Key</span>
                <br />
                <input
                    type="password"
                    name="serverKey"
                    value={serverKey}
                    onChange={(e) => setServerKey(e.target.value)}
                />
                <br />
                <br />
                <Button onClick={() => handleSubmitServerKey()}>Next Step</Button>
            </StyledContainer>
        );
    }
    return (
        <StyledContainer>
            <h2>Please select the Tenant you want to ingest events from</h2>
            <StyledError hidden={errorMessage.length === 0}>{errorMessage}</StyledError>
            <select onChange={(e) => setTenantId(parseInt(e.target.value, 10))} value={tenantId}>
                {tenants.map((tenant) => {
                    return (
                        <option key={tenants.indexOf(tenant)} value={tenant.id}>
                            {tenant.name}
                        </option>
                    );
                })}
            </select>
            <br />
            <Button onClick={() => handleSubmitTenant()}>Submit</Button>
        </StyledContainer>
    );
};

export default ConfigurationScreen;
